name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: 0 0 * * * # daily at 00:00

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-latest, windows-latest]
        build_type: [debug, release]
    env:
      GRPC_INSTALL_DIR: ~/.local
      GRPC_VERSION: 1.32.0

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: 'recursive'

    - uses: arduino/setup-protoc@v1
      with:
        version: '3.x'

    - name: Get CMake Version
      id: cmake-version
      run: |
        CMAKE_VERSION=$(cmake --version | grep -o "[0-9]*\.[0-9]*\.[0-9]*")
        echo ::set-output name=CMAKE_VERSION::${CMAKE_VERSION}

    - name: Cache grpc
      uses: actions/cache@v2
      id: grpc-cache
      with:
        path: ${{ env.GRPC_INSTALL_DIR }}
        key: ${{ runner.os }}-grpc-${{ env.GRPC_VERSION }}-${{ steps.cmake-version.outputs.CMAKE_VERSION }}

    - name: Set up grpc
      if: steps.grpc-cache.outputs.cache-hit != 'true'
      run: |
        cmake -E make_directory ${{ env.GRPC_INSTALL_DIR }}
        git clone --recurse-submodules -b v${{ env.GRPC_VERSION }} https://github.com/grpc/grpc
        cmake -E make_directory grpc/cmake/build
        cd grpc/cmake/build
        cmake -DgRPC_INSTALL=ON -DgRPC_BUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=${{ env.GRPC_INSTALL_DIR }} -DBENCHMARK_ENABLE_TESTING=OFF ../..
        cmake --build . -j 8
        cmake --build . --target install
  
    - name: Create Build Environment
      working-directory: ${{runner.workspace}}
      run: |
        cmake -E make_directory build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build/
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      working-directory: ${{runner.workspace}}/build/
      shell: bash
      run: 
        cmake --build . --config ${{ matrix.build_type }} -j 4

    - name: Test
      working-directory: ${{runner.workspace}}/build/
      shell: bash
      run: ctest -L GameDock
